#!/usr/bin/env python
# encoding: ${encoding}
from pyspark.sql import SparkSession
from pyspark.sql.types import ArrayType, StringType, DoubleType
import math


class Point():
    def __init__(self,long,lat):
        self.long = long
        self.lat = lat


def isinpolygon(point,vertex_lst, contain_boundary=True):
    #检测点是否位于区域外接矩形内
    lngaxis, lataxis = zip(*vertex_lst)
    
    minlng, maxlng = min(lngaxis),max(lngaxis)
    minlat, maxlat = min(lataxis),max(lataxis)
    lng, lat = point
    if contain_boundary:
        isin = (minlng<=lng<=maxlng) & (minlat<=lat<=maxlat)
    else:
        isin = (minlng<lng<maxlng) & (minlat<lat<maxlat)
    return isin


def isintersect(poi,spoi,epoi):
    #输入：判断点，边起点，边终点，都是[lng,lat]格式数组
    #射线为向东的纬线
    #可能存在的bug，当区域横跨本初子午线或180度经线的时候可能有问题
    lng, lat = poi
    slng, slat = spoi
    elng, elat = epoi
    if poi == spoi:
        #print("在顶点上")
        return None
    if slat==elat: #排除与射线平行、重合，线段首尾端点重合的情况
        return False
    if slat>lat and elat>lat: #线段在射线上边
        return False
    if slat<lat and elat<lat: #线段在射线下边
        return False
    if slat==lat and elat>lat: #交点为下端点，对应spoint
        return False
    if elat==lat and slat>lat: #交点为下端点，对应epoint
        return False
    if slng<lng and elng<lng: #线段在射线左边
        return False
    #求交点
    xseg=elng-(elng-slng)*(elat-lat)/(elat-slat)
    if xseg == lng:
        #print("点在多边形的边上")
        return None
    if xseg<lng: #交点在射线起点的左侧
        return False
    return True  #排除上述情况之后


def isin_multipolygon(poi,vertex_lst, contain_boundary=True):
    # 判断是否在外包矩形内，如果不在，直接返回false
    if not isinpolygon(poi, vertex_lst, contain_boundary):
        return False
    sinsc = 0
    for spoi, epoi in zip(vertex_lst[:-1],vertex_lst[1::]):
        intersect = isintersect(poi, spoi, epoi)
        if intersect is None:
            return (False, True)[contain_boundary]
        elif intersect:
            sinsc+=1
    return sinsc%2==1


def pintoToPolygonMinDist(long,lat, lk,contain_boundary=True) :
    if not lk:
        lk = "120.14171790317269,30.162036453899248;120.1372623078432,30.1693429582578;120.13525010350084,30.1775855371841;120.13632807011281,30.19138405337394;120.14804197396293,30.19681551280645;120.17319452824232,30.20037389109825;120.19676606482413,30.212858401228146;120.21516336166849,30.221971083397758;120.22558370558423,30.232643072085086;120.2389504915727,30.223656212017506;120.24125015367824,30.21778934196275;120.24132201811904,30.20293334602658;120.23995659374387,30.18832482231582;120.24096269591504,30.174151213927534;120.23003930091372,30.160662520187334;120.18778300972436,30.12187214315934;120.17887181906538,30.128119621067498;120.16902639067601,30.137177754745117;120.15989960669464,30.143861494262165;120.15429418031238,30.148483626057015;120.14883248281171,30.153043082275836"
    lk1 = lk.split(";")
    points = []
    for x in lk1:
        [x1,x2] = x.split(",")
        points.append([float(x1),float(x2)])
    
    if not points[-1]==points[0]:
        points.append(points[0])
    
    isIn = isin_multipolygon([long,lat],points, contain_boundary=True)
    if isIn :
        return -1
    
    dist = 1.7976931348623157E308
    
    p = Point(long,lat)
    for i in  range(len(points)-1):
        j = i + 1
        a = Point(points[i][0], points[i][1])
        b = Point(points[j][0], points[j][1])
        
        dist = min([dist, pointToLineDis(p, a, b)])
    
    return dist


def pointToLineDis(p, a, b):
    ABx = b.long - a.long
    ABy = b.lat - a.lat
    
    APx = p.long - a.long
    APy = p.lat - a.lat
    
    AB_AP = ABx * APx + ABy * APy
    distAB2 = ABx * ABx + ABy * ABy
    
    Dx = a.long
    Dy = a.lat
    
    if (distAB2 != 0):
        t = AB_AP / distAB2
        if (t >= 1):
            Dx = b.long
            Dy = b.lat
        elif t > 0:
            Dx = a.long + ABx * t
            Dy = a.lat + ABy * t
        else:
            Dx = a.long
            Dy = a.lat
    return LonLatDistance(Dx, Dy, p.long, p.lat)


def LonLatDistance(px,py,ax,ay):
    if (px == ax and py == ay):
      0.0
    else:
        distance = 6378137 * 2 * math.asin(math.sqrt(math.pow(math.sin((py - ay) * math.acos(-1) / 360), 2) + math.cos(py * math.acos(-1) / 180) * math.cos(ay * math.acos(-1) / 180) * math.pow(math.sin((px - ax) * math.acos(-1) / 360), 2)))
    return distance


def run(spark):
    spark.sql('''drop table if exists temp_binjiang_grid_20220701''')
    spark.sql('''create table temp_binjiang_grid_20220701 as (select *, 1 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.96620697263319,30.13062630932426;119.96635070151478,30.13381228758722;119.96685375260037,30.13896585603088;119.96728493924516,30.142276489922775;119.96785985477155,30.144181615169504;119.97404468820775,30.148907180402812;119.97691926583968,30.15028127955033;119.9802968945572,30.15115569621361;119.9862212193955,30.15189543098221;119.99232969686335,30.152644919069417;119.99520427449528,30.152238947069616;119.99764766548242,30.151520684781328;120.0004189379807,30.14971915041784;119.99150774732172,30.143098274939742;119.97318231491818,30.13485278372199;119.96699748148197,30.127900966083796') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 2 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.8816225258136,30.088097830113185;119.88190998357679,30.094378712612194;119.88500015453111,30.096565990005253;119.89351609076571,30.103314994937215;119.89962456823356,30.10500217343353;119.90555338459941,30.105314610702788;119.90936219996172,30.10325250628599;119.91209304871205,30.10231517172824;119.9143567785972,30.100627946894893;119.91058389545529,30.089410286629946;119.90907474219853,30.087410345867728;119.8816225258136,30.087785337872834') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 3 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.93544899197154,30.04135332404003;119.94234797828818,30.036225880098648;119.9494625579272,30.033724590674236;119.94342594490016,30.019028227525396;119.93171202434462,29.998261929507102;119.92646592016808,29.98781458319751;119.92006998493915,29.980119120883483;119.8846408323272,30.010584640744977;119.92955610782609,30.04129079585027') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 4 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.8816225258136,30.088097830113185;119.88190998357679,30.094378712612194;119.88500015453111,30.096565990005253;119.89351609076571,30.103314994937215;119.89962456823356,30.10500217343353;119.90555338459941,30.105314610702788;119.90936219996172,30.10325250628599;119.91209304871205,30.10231517172824;119.9143567785972,30.100627946894893;119.91058389545529,30.089410286629946;119.90907474219853,30.087410345867728;119.8816225258136,30.087785337872834') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 5 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.92793915790813,30.053014134395546;119.94094662169262,30.053608079574072;119.9537025599343,30.053951940927416;119.95999069850414,30.05420202115408;119.96121239399771,30.05192001543636;119.9494625579272,30.033724590674236;119.94238391050858,30.036257145812886;119.93541305975114,30.041384588119964;119.92941237894449,30.041384588119964;119.92829848011212,30.050950928446806;119.92797509012853,30.052982874023307') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 6 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.92617847910857,30.070518376883015;119.94022797728464,30.070643395939925;119.95197781335514,30.071737305882237;119.95905646077377,30.0749252023263;119.9655242604456,30.07583154609856;119.97748968983852,30.05473343951747;119.9697283302323,30.05010687713509;119.96121239399771,30.05198253684868;119.96006256294494,30.05423328113756;119.92955610782609,30.053139175784803;119.92786729346733,30.053014134395546;119.92714864905935,30.058484546022903;119.92650186909216,30.063704597001763;119.92599881800658,30.070487122093866') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 7 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.97059070352188,30.048121764854415;119.97526189217378,30.04818428868884;119.98287952289839,30.045808354953618;119.99121579803098,30.044182682912954;119.99897715763719,30.040868729526718;120.00515749954583,30.03830502839316;120.01054733260571,30.037742255760918;120.01564970790238,30.03930550510054;120.02226123645582,30.042807093214215;120.02808225616047,30.042994674763825;120.00695411056579,30.005346124748186;120.00695411056579,30.005346124748186;119.99394664678131,30.007034990275944;119.98352630286557,30.008223433794548;119.97059070352188,30.006909890121637;119.9618232417445,30.005095919977993;119.95693645977022,30.004032542594246;119.9478096590781,29.998965677872743;119.93861101065897,29.99095828775701;119.93753304404736,29.994273926884233;119.9456537425649,30.009161668519223;119.95557103539505,30.023109034159344;119.96211069950769,30.039743210451178;119.96685375260037,30.0459334055328') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 8 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.91430288026659,30.100421361084784;119.91494966023377,30.10195236585126;119.9176266106535,30.105639176977636;119.92276491817057,30.11007566379229;119.92867576842623,30.11273121103441;119.93952729898676,30.115480407507267;119.9506303550901,30.118260766239235;119.96061951236105,30.119416622446973;119.95612798481116,30.114449467886853;119.95133103338787,30.10620503116427;119.9505225584289,30.096487853513697;119.94915713405372,30.09378499431501;119.94788154022956,30.091035188129393;119.94746831969496,30.091128932793996;119.94301272436547,30.091488286509886;119.93853916292579,30.090472718256457;119.93586221250605,30.090207106359653;119.93431712702889,30.09059771184087;119.93431712702889,30.09059771184087;119.93316729597612,30.091003939887916;119.93198153270295,30.091582030740547;119.93020288779319,30.092410100878766;119.92792119179785,30.092035126589725;119.9254239024801,30.091644526844437;119.92528017359851,30.091644526844437;119.9215072904566,30.091582030740547;119.91830932284108,30.09139454218945;119.9137818630708,30.091066436360897;119.91115881098166,30.091082060472914') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 9 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.91118576014705,30.091081865924373;119.91388067667698,30.091081865924373;119.91578508435813,30.091206858730942;119.92192949404638,30.091613084249985;119.9251633938823,30.09164433229701;119.93026576917897,30.09242553023043;119.93357153345569,30.090831879832404;119.93583526334083,30.09023816030528;119.94292289381457,30.091441219813056;119.94752221802565,30.091066241812324;119.95495120459317,30.08870697227437;119.9655871418313,30.075769039900763;119.95908340993907,30.074893948943195;119.95174425392254,30.071784187463933;119.94013814673363,30.07081529688266;119.92616949605348,30.070580886431415;119.92610661466777,30.070518376883015;119.92614254688817,30.07292496570307;119.92250440957277,30.072893711681736;119.91962983194084,30.072893711681736;119.91457237191966,30.072753068462347;119.91222779453862,30.07286245765044;119.90974847133108,30.07348753638182;119.90752067366633,30.074612668046413;119.904789824916,30.075362748642778;119.90292134945524,30.0753940018763;119.90274168835325,30.075362748642778;119.90011863626411,30.075862799182495;119.89907660187254,30.075800293004644;119.89756744861577,30.07533149539928;119.8963816853426,30.075769039900763;119.89702846530979,30.077050408982455;119.89882507632974,30.079300577531974;119.90640677483395,30.085269524157763;119.90863457249871,30.086863265109706;119.91032338685747,30.089206954673024;119.91107796348585,30.091050617697793') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 10 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.89638168534253,30.075753652561385;119.89760338083612,30.075331734616604;119.89909456798267,30.07580053222083;119.90015456848445,30.075878664936717;119.90272372224298,30.075362987860025;119.90476736727818,30.07537080116933;119.90752516519382,30.07460509389575;119.90974847133101,30.073487775603656;119.91260059132519,30.07281581580826;119.91360669349636,30.072776748236503;119.92047423912015,30.072893950905026;119.9261694960534,30.072909577916892;119.92617847910851,30.06761187807049;119.92687915740629,30.060438429726908;119.9269689879573,30.059656976621834;119.92791220874277,30.05285807170689;119.92841525982836,30.05016963898242;119.92893627702414,30.04521460181565;119.92943932810972,30.04119724279154;119.88432642539864,30.044448658901022;119.88950066513611,30.054921237519196;119.89169253058046,30.059453797793886;119.8940640571268,30.066517922063753;119.89510609151837,30.072018834261282;119.89582473592635,30.07455040029001') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 11 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.95399001769749,30.110719402713915;120.05334260710106,30.094894074719;120.05355820042345,30.08470702115705;120.04816836736359,30.08095691856697;120.03584361576668,30.080847538419167;120.0271480184301,30.08203508777182;120.01611682676757,30.08083191267379;119.99401851122211,30.067596010977315;119.97095002572587,30.087097636590933;119.94910323572321,30.093534820583102;119.95046866009838,30.09650328222251;119.95133103338796,30.1062829450964') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 12 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'119.99473715563009,30.06397028078299;120.00122292141214,30.070221455983443;120.00571444896202,30.073409401758536;120.0107808920383,30.076222208931018;120.0184344549833,30.080034996353575;120.0266629334547,30.081535068747115;120.03485547970571,30.080378764973364;120.03826904064363,30.079566219018133;120.04434158589108,30.07950371520387;120.05045006335892,30.080691280853237;120.05380972596625,30.082472602323943;120.05508531979041,30.085378899365953;120.0552649808924,30.08616014729959;120.05386362429684,30.091472467914947;120.0591456606955,30.09797185626834;120.06579312146935,30.098596774709755;120.07420126104275,30.093378583265924;120.08217821397135,30.087785123032365;120.09051448910394,30.084410143270457;120.10373754621082,30.08591014863909;120.10765415823433,30.085722649224785;120.08904126806758,30.071784187463933;120.06913481796647,30.05956296257467;120.06575718924896,30.056061972822086;120.05698972747156,30.04752778643895;120.04401819590748,30.044745418592154;120.0390954817128,30.045120573917664;119.99303037516114,30.062782512408067') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 13 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'120.14171790317269,30.162036453899248;120.1372623078432,30.1693429582578;120.13525010350084,30.1775855371841;120.13632807011281,30.19138405337394;120.14804197396293,30.19681551280645;120.17319452824232,30.20037389109825;120.19676606482413,30.212858401228146;120.21516336166849,30.221971083397758;120.22558370558423,30.232643072085086;120.2389504915727,30.223656212017506;120.24125015367824,30.21778934196275;120.24132201811904,30.20293334602658;120.23995659374387,30.18832482231582;120.24096269591504,30.174151213927534;120.23003930091372,30.160662520187334;120.18778300972436,30.12187214315934;120.17887181906538,30.128119621067498;120.16902639067601,30.137177754745117;120.15989960669464,30.143861494262165;120.15429418031238,30.148483626057015;120.14883248281171,30.153043082275836') = -1)''')
    spark.sql('''insert into temp_binjiang_grid_20220701 (select *, 14 as location from temp_hangzhou_grid where ptpmd(cast(GRID_LNG_CENT as double), cast(GRID_LAT_CENT as double),'120.11523585673838,30.195223994440873;120.12436264071977,30.188918375841954;120.12213484305502,30.178928442340148;120.12357213187099,30.16787588630495;120.12357213187099,30.16787588630495;120.12450636960136,30.16181830474853;120.11731992552153,30.158320973081995;120.11731992552153,30.158320973081995;120.1186853498967,30.144267931084308;120.11875721433749,30.1423315756777;120.11559517894237,30.1270892447907;120.09065821798539,30.128713540765045;120.07024871679869,30.139270806587565;120.01771581057518,30.151076101766073;120.02001547268073,30.159132864815085;120.03122632544525,30.204775293206186;120.08253753617518,30.21601091674449;120.08383109610955,30.192477042415216;120.08778364035346,30.18592150324458;120.09403584670291,30.182237721159407;120.10028805305235,30.17998992136262') = -1)''')


def main():
    spark = SparkSession.Builder().appName('temp_jinlanling_szh_user3').enableHiveSupport().getOrCreate()
    sc = spark.sparkContext
    
    spark.sql("use bdcqs_hive_db")
    
    sc.setLogLevel('WARN')
    spark.sql("set hive.exec.dynamic.partition.mode=nonstrict ")
    spark.sql("set hive.exec.dynamic.partition=true")
    spark.sql("set hive.exec.compress.output=true")
    spark.sql("set mapred.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec")
    
    spark.udf.register("ptpmd", pintoToPolygonMinDist)
    run(spark)
    spark.stop()


if __name__ == '__main__':
    main()
